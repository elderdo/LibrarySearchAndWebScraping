/* VERSION = $Id$ $Rev: 217535 $ $Date: 2013-08-23 20:52:13 +0000 (Fri, 23 Aug 2013) $ */

//needed for form validation
dojo.require("dojox.validate.check");

// redirect logging calls to standard debug if logging not enabled
dojo.log = {
  debug:function(){tapestry.log.apply(this, arguments);},
  info:function(){tapestry.log.apply(this, arguments);},
  warn:function(){tapestry.log.apply(this, arguments);},
  err:function(){tapestry.log.apply(this, arguments);},
  exception:function(){tapestry.log.apply(this, arguments);}
}

/* @see http://javascript.crockford.com/remedial.html */
function typeOf(value) {
  var s = typeof value;
  if (s === 'object') {
    if (value) {
      if (typeof value.length === 'number' &&
          !(value.propertyIsEnumerable('length')) &&
          typeof value.splice === 'function') {
        s = 'array';
      }
    } else {
      s = 'null';
    }
  }
  return s;
}

/* @see http://javascript.crockford.com/remedial.html */
function isEmpty(o) {
  var i, v;
  if (typeOf(o) === 'object') {
    for (i in o) {
      v = o[i];
      if (v !== undefined && typeOf(v) !== 'function') {
        return false;
      }
    }
  }
  return true;
}

var tapestry={
    requestsInFlight: 0,
    scriptInFlight:false,
    ScriptFragment:new RegExp('(?:<script.*?>)((\n|.|\r)*?)(?:<\/script>)', 'im'), 
    GlobalScriptFragment:new RegExp('(?:<script.*?>)((\n|.|\r)*?)(?:<\/script>)', 'img'),

    isIE: dojo.isIE,
    // setup firebug logging - useful for finding unimplemented methods
    log: function() {
        //chrome workaround - see https://code.google.com/p/chromium/issues/detail?id=48662
        if (console && console.log && console.log.apply) console.log.apply(console,arguments);
    },
    /**
     * Executes the passed function when the document has done loading
     */
    addOnLoad: function(){dojo.addOnLoad.apply(this,arguments);},
    /**
     * Returns the dom node with the given id
     */
    byId: dojo.byId,

    /**
     * Makes sure that the given namespace (passed as a string) exists
     * and is a valid javascript object.  
     */
    provide: dojo.provide,

    /**
     * Connects the event of the given target node to the given function of
     * the global namespace "tapestry".
     * Users of this method usually attach custom methods to the tapestry namespace
     * before calling this.
     *
     * Parameters: target, event, funcName
     */
    connect: function(target, event, funcName) {
        target = dojo.byId(target);
        tapestry['h_'+funcName] = dojo.connect(target, event, tapestry, funcName);        
    },
    
    /**
     * Function: connectBefore
     */
    connectBefore:function(target, event, funcName){
            target = dojo.byId(target);
            var original = target[event];
            target[event] = function() {
                tapestry[funcName].apply(this, arguments);
                original.apply(this, arguments);
            };
    },    

    /**
     * Disconnects the event of the given target node from the given function of
     * the global namespace "tapestry"
     *
     * Parameters: target, event, funcName
     */
    cleanConnect: function(target, event, funcName) {
        dojo.disconnect(tapestry['h_'+funcName]);
    },

  /**
   * Perform an XHR.
   * Implementation should set the mime-type to either "text/xml" or
   * "text/json" and include the request headers described in the comments to the
   * json parameter.
     * Implementations are also responsible for handling the responses.  
   *
   * Parameters:
   *  url     - The url to bind the request to.
   *  content - A properties map of optional extra content to send.
   *  json    - (Optional) Boolean parameter specifying whether or not to create a
   *        json request. If true, the request headers should include "json":true.
   *          If false or unspecified, they should contain "dojo-ajax-request":true
   */
    bind: function(url, content, json, callback){
    //tapestry.log('tapestry.bind', arguments);
        var parms = {
            url:url,
            content:content,
            useCache:true,
            preventCache:true,
            encoding: tapestry.requestEncoding,
            error: (function(){tapestry.error.apply(this, arguments);})
        };
        // setup content type
        if (typeof json != "undefined" && json) {
            parms.handleAs = "json";
            parms.headers={"json":true};
      if (callback) {
        parms.load=(function(response, data){callback(response, data)});
      } else {
        parms.load=(function(){tapestry.loadJson.apply(this, arguments);});
      }
        } else {
            parms.handleAs = "xml";
            parms.headers={"dojo-ajax-request":true};
      if (callback) {
        parms.load=(function(response, data){callback(response, data)});
      } else {
        parms.load=(function(){tapestry.load.apply(this, arguments);});
      }
        }

    if (content && content['sequenceid']) {
        parms.headers['X-III-Sequence'] = content['sequenceid'];
    }

    tapestry.requestsInFlight++;

    //if this is an ajax call that is a result of a popin dialog trigger,we want
    //to cancel any previous popin ajax requests so that the popin dialog does not get updated
    //with content from a previous request that may have been canceled by the user before it returned
    if (content && content["beventtarget.id"]) {
       var eventLink = tapestry.byId(content["beventtarget.id"]);
       if (eventLink && dojo.hasClass(eventLink, "popInDialogTrigger")) {
          //if there is an ajax request pending, cancel it and send the new one
          if (tapestry.popInAjax ) {
               tapestry.popInAjax.cancel();
          }
          tapestry.popInAjax = dojo.xhrGet(parms);
       } else {
          dojo.xhrGet(parms);
       }
    } else {
       dojo.xhrGet(parms);
    }


    },
    
    error: function(){
        tapestry.requestsInFlight--;
        tapestry.log('error');
    },
    

    responseContains: function(id, data){
      if (data) {
        var resp = data.getElementsByTagName("ajax-response");
        if (resp && resp.length > 0 && resp[0].childNodes) {
          var elms = resp[0].childNodes;
          for (var i=0; i < elms.length; i++) {
            if (elms[i].getAttribute("id") == id) {
              return true;
            }
          }
        }
      }

      return false;
    },

    load: function(data, args){
        tapestry.requestsInFlight--;
        if (!data) {
                tapestry.log("No data received in response.");
                return;
        }

        var resp=data.getElementsByTagName("ajax-response");
        if (!resp || resp.length < 1 || !resp[0].childNodes) {
                tapestry.log("No ajax-response elements received.");
                return;
        }

        var elms=resp[0].childNodes;
        var bodyScripts=[];
        var initScripts=[];
        var rawData=[];
        for (var i=0; i<elms.length; i++) {
            var elmType=elms[i].getAttribute("type");
            var id=elms[i].getAttribute("id");

            if (elmType == "exception") {
                    dojo.log.err("Remote server exception received.");
                    tapestry.presentException(elms[i], kwArgs);
                    return;
            } else if (elmType == "page") {
                window.location=elms[i].getAttribute("url");
                return;
            } else if (elmType == "status") {
                dojo.publish(id, {message: tapestry.html.getContentAsString(elms[i])});
                continue;
            }

            // handle javascript evaluations
            if (elmType == "script") {
                    if (id == "initializationscript") {
                            initScripts.push(elms[i]);
                            continue;
                    } else if (id == "bodyscript") {
                            bodyScripts.push(elms[i]);
                            continue;
                    } else if (id == "includescript") {
                            // includes get processed immediately (synchronously)
                            var includes=elms[i].getElementsByTagName("include");
                            if (!includes){continue;}
                            for (var e=0; e<includes.length;e++) {
                                    tapestry.loadScriptFromUrl(includes[e].getAttribute("url"));
                            }
                            continue;
                    }
            } else {
                    rawData.push(elms[i]);
            }

            if (!id){
                    tapestry.log("No element id found in ajax-response node.");
                    continue;
            }

            var node=dojo.byId(id);
            if (!node) {
                    tapestry.log("No node could be found to update content in with id " + id);
                    continue;
            }

            tapestry.loadContent(id, node, elms[i]);
        }

        // load body scripts before initialization
        for (var i=0; i<bodyScripts.length; i++) {
                tapestry.loadScriptContent(bodyScripts[i], true);
        }

        for (var i=0; i<rawData.length; i++) {
                tapestry.loadScriptContent(rawData[i], true);
        }

        for (var i=0; i<initScripts.length; i++) {
                tapestry.loadScriptContent(initScripts[i], true);
        }        
    },
    
    loadJson: function(){
        tapestry.requestsInFlight--;
        tapestry.log('loadJson');
    },
    
    loadContent: function(id, node, element){
        if (typeof element.childNodes != "undefined" && element.childNodes.length > 0) {
            for (var i = 0; i < element.childNodes.length; i++) {
                if (element.childNodes[i].nodeType != 1) { continue; }

                var nodeId = element.childNodes[i].getAttribute("id");
                if (nodeId) {
                    element=element.childNodes[i];
                    break;
                }
            }
        }
        
        //dojo.event.browser.clean replacement?
        //dojo.event.browser.clean(node); // prevent mem leaks in ie
      
         var content=tapestry.html.getContentAsString(element); 
        // fix for IE - setting innerHTML does not work for SELECTs
        if (tapestry.isIE && node.outerHTML && node.nodeName == "SELECT") {
            node.outerHTML = node.outerHTML.replace(/(<SELECT[^<]*>).*(<\/SELECT>)/, '$1' + content + '$2');
            node=tapestry.byId(id);
        } else if (content && content.length > 0){
            //try simple innerHTML - if that fails fall back to more complex dojo.html.set. Accounts
            //for situations as inserting content in read-only elements such as tr, tbody in IE.
            try {
                node.innerHTML=content;
            } catch(e){
                //something went wrong - let's give the more complex dojo.html.set a try
                dojo.require("dojo.html");
                dojo.html.set(node, content);
            }
         }

        // copy attributes
    var atts=element.attributes;
    var attnode, i=0;
    while((attnode=atts[i++])){
      if(tapestry.isIE){
        if(!attnode){ continue; }
        if((typeof attnode == "object")&&
          (typeof attnode.nodeValue == 'undefined')||
          (attnode.nodeValue == null)||
          (attnode.nodeValue == '')){
          continue;
        }
      }

      var nn = attnode.nodeName;
      var nv = attnode.nodeValue;
      if (nn == "id" || nn == "type" || nn == "name"){continue;}

      /*if (nn == "style") {
        dojo.html.setStyleText(node, nv);
      } else */if (nn == "class") {
        dojo.addClass(node, nv);
      } else if (nn == "value") {
                node.value = nv;
            } else {
                node.setAttribute(nn, nv);
            }
        }

      // apply disabled/not disabled
      var disabled = element.getAttribute("disabled");
        if (!disabled && node["disabled"]) {
            node.disabled = false;
        } else if (disabled) {
            node.disabled = true;
        }
    },    

    loadScriptContent:function(element, async){
        if (typeof async == "undefined") { async = true; }
        async = this.isIE;

        if (tapestry.scriptInFlight) {
            dojo.log.debug("loadScriptContent(): scriptInFlight is true, sleeping");
            setTimeout(function() { tapestry.loadScriptContent(element, async);}, 5);
            return;
        }

        var text=tapestry.html.getContentAsString(element);
        text.replace(this.GlobalScriptFragment, '');
        var scripts = text.match(this.GlobalScriptFragment);

        if (!scripts) { return; }
        //IIIDelayAjaxScriptEval global var to override timeout in evaluating scripts
        //loaded async
        if (async && (typeof IIIOverrideDelayAjaxScriptEval === "undefined" || IIIOverrideDelayAjaxScriptEval === false)) {
            setTimeout(function() {tapestry.evaluateScripts(scripts);}, 60);
        } else {
            tapestry.evaluateScripts(scripts);
        }
    },

    evaluateScripts:function(scripts){
        tapestry.scriptInFlight = true;

        for (var i=0; i<scripts.length; i++) {
            var scr = scripts[i].match(this.ScriptFragment)[1];
            if(!scr || scr.length <= 0){continue;}
            try {
                //dojo.log.debug("evaluating script:", scr);
                eval(scr);
            } catch (e) {
                tapestry.scriptInFlight = false;
                dojo.log.exception("Error evaluating script: " + scr, e, false);
            }
        }

        tapestry.scriptInFlight = false;
    },

    loadScriptFromUrl: function(){
        tapestry.log('loadScriptFromUrl', arguments);
    },    

    /**
     * Helper that builds the content from eventName and (triggered) id and then forwards
     * execution to tapestry.bind
     * 
     * @param url
     * @param id
     * @param json
     * @param eventName
     */
    linkOnClick: function(url, id, isJson, eventName) {
        var content={beventname:(eventName || "onClick")};
        content["beventtarget.id"]=id;
        tapestry.bind(url, content, isJson);
        return false;        
    },

    isServingRequests:function(){
        return (this.requestsInFlight > 0);
    }
};

tapestry.form = {
    missingClass:"fieldMissing", // default css class that will be applied to fields missing a value
  invalidClass:"fieldInvalid", // default css class applied to fields with invalid data

  dialogName:"tapestry:AlertDialog",

  
    forms:{},
    currentFocus:null,
    /**
     * Submits the specified form.
     * Should check the value of form.submitmode to find out what type of
     * submission (cancel, refresh or normal) to do and whether to run client validation.
     *
     * Parameters:
     * form     - The form or form id to submit.
     * submitName -   (Optional) Submit name to use when submitting. This is used
     *          to associate a form submission with a particular component.
     *                  Implementations will typically just set form.submitname to this value.
     * parms    - (Optional) Extra set of parameters. Implementations can just look for
     *                  the async key and if that's set to true, they should perform an async
     *                  submission.
     */
    submit:function(form, submitName, parms){
        form=dojo.byId(form);
        if (!form) {
                tapestry.log("Form not found with id " + form);
                return;
        }
        var id=form.getAttribute("id");

        if (dojo.exists("value", form.submitmode)
                && (form.submitmode.value == "cancel" || form.submitmode.value == "refresh")
                && !parms) {
            if (submitName) { form.submitname.value = submitName; }
            form.submit();
            return;
        }

        if (!tapestry.form.validation.validateForm(form, this.forms[id]))
            return;

        if (parms && dojo.exists("async", parms) && parms.async) {
            tapestry.form.submitAsync(form, null, submitName, parms);
            return;
        } else if(dojo.exists(id, this.forms) && this.forms[id].async){
            tapestry.form.submitAsync(form);
            return;
        }

        if (submitName) { form.submitname.value = submitName; }
        form.submit();
    },

    /** Same as submit, but forces cancel submission */
    cancel: function(formId, submitName, parms) {tapestry.log('t.f.submit', arguments);},

    /** Same as submit, but forces refresh submission */
    refresh: function(formId, submitName, parms) {tapestry.log('t.f.submit', arguments);},

    /**
   * Registers a form and allows definition of its properties.
   * Implementation should keep track of such properties and
   * use them later on, when the form is submitted.
   *
   * Parameters:
   *  id    - The form or form id to register.
   *  async - Boolean, if true form submission should be asynchronous.
   *  json  - Boolean, if true form submission should be asyncrhronous json.
   */
    registerForm: function(id, async, json) {
        var form=dojo.byId(id);
        if (!form) {
              //  dojo.raise("Form not found with id " + id);
                return;
        }

        // make sure id is correct just in case node passed in has only name
        id=form.getAttribute("id");

        // if previously connected, cleanup and reconnect
        if (this.forms[id]) {
            //dojo.disconnect(form, "onsubmit", this, "onFormSubmit");
            for(var i = 0; i < form.elements.length; i++) {
                var node = form.elements[i];
                if(node && node.type 
                    && (node.type.toLowerCase()=="submit" || node.type.toLowerCase()=="button")) {
                        //dojo.disconnect(node, "onclick", tapestry.form, "inputClicked");
                }
            }

            var inputs = form.getElementsByTagName("input");
            for(var i = 0; i < inputs.length; i++) {
                    var input = inputs[i];
                    if(input.type.toLowerCase() == "image" && input.form == form) {
                            //dojo.disconnect(input, "onclick", tapestry.form, "inputClicked");
                    }
            }

            //dojo.disconnect(form, "onsubmit", this, "overrideSubmit");
            delete this.forms[id];
        }

        this.forms[id]={};
        this.forms[id].validateForm=true;
        this.forms[id].profiles=[];
        this.forms[id].async=(typeof async != "undefined") ? async : false;
        this.forms[id].json=(typeof json != "undefined") ? json : false;

        if (!this.forms[id].async) {
            dojo.connect(form, "onsubmit", this, "onFormSubmit");
        } else {
            for(var i = 0; i < form.elements.length; i++) {
                var node = form.elements[i];
                if(node && node.type 
                    && (node.type.toLowerCase()=="submit" || node.type.toLowerCase()=="button")) {
                        dojo.connect(node, "onclick", tapestry.form, "inputClicked");
                }
            }

            var inputs = form.getElementsByTagName("input");
            for(var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                if(input.type.toLowerCase() == "image" && input.form == form) {
                        dojo.connect(input, "onclick", tapestry.form, "inputClicked");
                }
            }

            dojo.connect(form, "onsubmit", this, "overrideSubmit");
        }        
    },
    
    overrideSubmit: function(e){
        dojo.stopEvent(e);
        var elm = e.target;
        if (dojo.exists("form", elm)){
            elm = elm.form;
        }
        tapestry.form.submitAsync(elm);
    },
    
    inputClicked:function(e){
        var node = e.currentTarget;
        if(node.disabled || !dojo.exists("form", node)) { return; }
        this.forms[node.form.getAttribute("id")].clickedButton = node;
    },

    setFormValidating:function(formId, validate){
        if (this.forms[formId]){
            this.forms[formId].validateForm = validate;
        }
    },

    onFormSubmit:function(evt){
        if(!evt || !dojo.exists("target", evt)) {
            tapestry.log("No valid form event found with argument: " + evt);
            return;
        }

        var id=evt.target.getAttribute("id");
        if (!id) {
                tapestry.log("Form had no id attribute.");
                return;
        }
        var form = dojo.byId(id);

        if (dojo.exists("value", form.submitmode)
                && (form.submitmode.value == "cancel" || form.submitmode.value == "refresh")) {
                return;
        }

        if (!tapestry.form.validation.validateForm(form, this.forms[id])) {
                dojo.stopEvent(evt);
        }
    },
    
    submitAsync:function(form, content, submitName, parms){
        form=dojo.byId(form);
        if (!form) {
                tapestry.log("Form not found with id " + id);
                return;
        }
        var formId=form.getAttribute("id");

        if (!tapestry.form.validation.validateForm(form, this.forms[formId])) {
                tapestry.log("Form validation failed for form with id " + formId);
                return;
        }

        if (submitName){
            var previous = form.submitname.value;
            form.submitname.value=submitName;
            if(!content){ content={}; }
            if(form[submitName]){
                    content[submitName]=form[submitName].value;
            }
        }
    
        // handle submissions from input buttons
        if (dojo.exists("clickedButton", this.forms[formId])) {
            if (!content) { content={}; }
            content[this.forms[formId].clickedButton.getAttribute("name")]=this.forms[formId].clickedButton.getAttribute("value");
            delete this.forms[formId].clickedButton;
        }

        var kwArgs={
            form:form,
            content:content,
            useCache:true,
            preventCache:true,
            error: (function(){tapestry.error.apply(this, arguments);}),
            encoding: tapestry.requestEncoding
        };
    
        // check for override
        if (parms){
            if (dojo.exists("url", parms)) { kwArgs.url=parms.url; }
        }

        if (this.forms[formId].json || parms && parms.json) {
            kwArgs.headers = {"json":true};
            kwArgs.handleAs = "json";
            kwArgs.load = (function(){tapestry.loadJson.apply(this, arguments);});
        } else {
            kwArgs.headers = {"dojo-ajax-request":true};
            kwArgs.handleAs = "xml";
            kwArgs.load = (function(){tapestry.load.apply(this, arguments);});
        }

        dojo.xhrPost(kwArgs);

        if (submitName){
            form.submitname.value = previous;
        }
    },    

    /**
     * Registers a form validation/translation profile.
     * TODO: Describe profile structure.
     *
   * Parameters:
   *  formId    - The form or form id to register profile with.
   *  profile     - The object containing all of the validation/value constraints for the form.
     */    
    registerProfile: function(id, profile) {
        if (!this.forms[id]) return;
        this.forms[id].profiles.push(profile);
    },

  /**
   * Clears any previously registered validation profiles on the specified form.
   *
   * Parameters:
   *  formId      -   The form id to clear profiles for.
   */
    clearProfiles: function(id) {
        if (!this.forms[id]) return;
    
        for (var i=0; i < this.forms[id].profiles.length; i++) {
                delete this.forms[id].profiles[i];
        }
        this.forms[id].profiles=[];
     },

    /**
     * Brings keyboard input focus to the specified field.
     */
    focusField: function(field) {
        tapestry.log('t.f.focusField', arguments);
        try{
            field = dojo.byId(field);
            if (field.disabled || field.clientWidth < 1)
      return;        
            if(dojo.exists("focus", field)){
                field.focus();
                return;
            }            
        } catch(e){}
    },

    datetime: {
    isValidDate:function(value, flags){
    if(!value){return false;}
    if (!flags){
      dojo.raise("isValidDate: value and flags must be specified");
      return;
    }

    // parse date value
    var dateValue=null;
    try {
      dateValue = dojo.date.parse(value, flags);
    } catch (e) {
      dojo.log.exception("Error parsing input date.", e, true);
      return false;
    }
    if(dateValue == null) { return false; }
    // convert to format that is validatable
    value=dojo.date.format(dateValue, flags);

    // max date
    if (!(typeof flags.max == "undefined")){
      if (typeof flags.max == "string"){
      flags.max=dojo.date.parse(flags.max, flags);
      }
      if (dojo.date.compare(dateValue, flags.max, dojo.date.compareTypes.DATE) > 0){
      return false;
      }
    }
    // min date
    if (!(typeof flags.min == "undefined")){
      if (typeof flags.min == "string"){
      flags.min=dojo.date.parse(flags.min, flags);
      }
      if (dojo.date.compare(dateValue, flags.min, dojo.date.compareTypes.DATE) < 0){
      return false;
      }
    }
    return true;
    }
  },
    
  validation: {
    isEmailAddress:function(){
    dojo.require("dojox.validate.web");
    return dojox.validate.isEmailAddress(arguments[0]);
    },

    isReal:function(){
    dojo.require("dojo.i18n");
    //need to find an equavalent of .number.isReal
    return dojo.i18n.number.isReal(dojo.i18n.number, arguments);        
    },

    isValidPattern:function(value, pattern){
    if (typeof value != "string" || typeof pattern != "string"){return false;}
    var re = new RegExp(pattern);
    return re.test(value);
    },

    isPalleteSelected:function(elem){
    return elem.length > 0;
    },

    isEqual:function(value, other){
    var otherValue = dojo.byId(other).value;
    return value == otherValue;
    },

    isNotEqual:function(value, other){
    return !tapestry.form.validation.isEqual(value, other);
    },

    isText:dojox.validate.isText,

    greaterThanOrEqual:function(value, minString, flags){
    dojo.require("dojo.i18n");
    flags.validate=false;
    //need to find an equavalent to min and num
    var min = dojo.i18n.number.parse(minString, null, flags);
    var num = dojo.i18n.number.parse(value, null, flags);
    if (Number.NaN == num){return false;}

    return num >= min;
    },

    lessThanOrEqual:function(value, maxString, flags){
    dojo.require("dojo.i18n");
    flags.validate=false;
    //need to find an equavalent to min and num
    var max = dojo.i18n.number.parse(maxString, null, flags);
    var num = dojo.i18n.number.parse(value, null, flags);
    if (Number.NaN == num){return false;}

    return num <= max;
    },

    validateForm:function(form, props){
    if (typeof form == "undefined") {return false;}
    if (typeof props == "undefined") {return true;} // form exists but no profile? just submit I guess..

    //Custom client side validation - if doesn't validate return false and the ajax for does not get
    //submitted
    if (dojo.hasClass(form, 'customClientSideValidation')) {
       if (performCustomClientSideValidation(form)) {
                return true;
       } else {
                return false;
       }
    //show ajax spinner in form if this has ajaxFormFeedback class
    } else if (dojo.hasClass(form, 'ajaxFormSubmissionFeedback')) {
        showAjaxSubmitFeedback(form)
    }

    if (!props.validateForm) {return true;}
    try {
      this.clearValidationDecorations(form, props);
      for (var i=0; i < props.profiles.length; i++) {
      var results=dojox.validate.check(form, props.profiles[i]);
      if (!this.processResults(form, results, props.profiles[i])) {
        this.summarizeErrors(form, results, props.profiles[i]);
        return false;
      }
      }
    } catch (e) {
      // since so many dynamic function calls may happen in here it's best that we
      // catch all of them and log them or else peoples forms might still get submitted
      // and they'd never be able to figure out what was wrong
      dojo.log.exception("Error validating", e, true);
      return false;
    }
    return true;
    },

    processResults:function(form, results, profile){
    if (results.isSuccessful()){return true;}
    var formValid=true;
    if (results.hasMissing()) {
      var missing=results.getMissing();
      for (var i=0; i < missing.length; i++) {
      this.handleMissingField(missing[i], profile);
      }
      formValid=false;
    }
    if (results.hasInvalid()) {
      var invalid=results.getInvalid();
      for (var i=0; i < invalid.length; i++) {
      this.handleInvalidField(invalid[i], profile);
      }
      formValid=false;
    }
    return formValid; // if got past successful everything is invalid
    },

    handleMissingField:function(field, profile){
    field=dojo.byId(field);
    if (typeof field == "undefined") {return;}
    dojo.removeClass(field, this.missingClass);
    if (!dojo.hasClass(field, this.invalidClass)){
      dojo.addClass(field, this.invalidClass);
    }
    },

    handleInvalidField:function(field, profile){
    field=dojo.byId(field);
    if (typeof field == "undefined") {return;}
    dojo.removeClass(field, this.missingClass);
    if (!dojo.hasClass(field, this.invalidClass)){
      dojo.addClass(field, this.invalidClass);
    }
    },

    clearValidationDecorations:function(form, props){
    for (var i=0; i < props.profiles.length; i++) {
    
      for (var fieldName in props.profiles[i]) {
      if (typeof form.elements[fieldName] == "undefined"
        || typeof form.elements[fieldName].type == "undefined"
        || form.elements[fieldName].type == "submit"
        || form.elements[fieldName].type == "hidden"){
        continue;
      }
      dojo.removeClass(form.elements[fieldName], this.missingClass);
      dojo.removeClass(form.elements[fieldName], this.invalidClass);
      }
    }
    },

    summarizeErrors:function(form, results, profile){
    var merrs=[];
    var ierrs=[];
    tapestry.form.currentFocus=null;
    
    if (results.hasMissing()){
      var fields=results.getMissing();
      for (var i=0; i<fields.length; i++){
      if(i==0 && !tapestry.form.currentFocus){
        tapestry.form.currentFocus=fields[i];
      }
      if (profile[fields[i]] && profile[fields[i]]["required"]){
        if (dojo.isArray(profile[fields[i]]["required"])) {
        for (var z=0; z < profile[fields[i]]["required"].length; z++) {
          merrs.push(profile[fields[i]]["required"][z]);
        }
        } else {
        merrs.push(profile[fields[i]]["required"]);
        }
      }
      }
    }

    if (results.hasInvalid()){
      var fields=results.getInvalid();
      for (var i=0; i<fields.length; i++){
        if(i==0 && !tapestry.form.currentFocus){
        tapestry.form.currentFocus=fields[i];
        }
        if (profile[fields[i]] && profile[fields[i]]["constraints"]){
        if (dojo.isArray(profile[fields[i]]["constraints"])) {
        for (var z=0; z < profile[fields[i]]["constraints"].length; z++) {
          ierrs.push(profile[fields[i]]["constraints"][z]);
        }
        } else{
        ierrs.push(profile[fields[i]]["constraints"]);
        }
      }
      }
    }
    dojo.require("dijit.form.Button");
    var msg="";
    if (merrs.length > 0) {
      msg+='<ul class="missingList">';
      for (var i=0; i<merrs.length;i++) {
        msg+="<li>"+merrs[i]+"</li>";
      }
      msg+="</ul>";
    }
    if (ierrs.length > 0) {
      msg+='<ul class="invalidList">';
      for (var i=0; i<ierrs.length;i++) {
      msg+="<li>"+ierrs[i]+"</li>";
      }
      msg+="</ul>";
    }
    msg+="<div id='alertOKButton'>";
    msg+="</div>";

    dojo.require("tapestry.dialog");
    
    var ad=dijit.byId("validationDialog");
    if (ad) {
      ad.setContent(msg);
      var button = new dijit.form.Button({
        label: "OK",
        onClick: function(){dijit.byId("validationDialog").hide()}},
        "alertOKButton");
      ad.show();
      return;
    }
    var dialog = new tapestry.custom.Dialog({content:msg, id:"validationDialog"});
    dialog.startup();
    var button = new dijit.form.Button({
        label: "OK", onClick: function(){
        dijit.byId("validationDialog").hide()}},
        "alertOKButton");
    dialog.show();
    }
  }
  };

tapestry.event = {
    buildEventProperties:function(event, props, args){ 
        if (!props) props={};

        var isEvent = (typeof event != "undefined")
            && (event)
            && (typeof Event != "undefined") && (event.eventPhase);
        if (isEvent) {
            if(event["type"]) props.beventtype=event.type;
            if(event["keys"]) props.beventkeys=event.keys;
            if(event["charCode"]) props.beventcharCode=event.charCode;
            if(event["pageX"]) props.beventpageX=event.pageX;
            if(event["pageY"]) props.beventpageY=event.pageY;
            if(event["layerX"]) props.beventlayerX=event.layerX;
            if(event["layerY"]) props.beventlayerY=event.layerY;

            if (event["target"])
                this.buildTargetProperties(props, event.target);
        }

	//dojo.toJson throwing can't serialize DOM nodes in modern browsers - c1287558
	//dojox.json.ref handles circular references, but causes certain versions of Chrome to freeze up -C1368119
	//The @EventListener annotation uses the buildEventProperties function, but our implementations do not require prop.methodArguments 
	//to function: commenting out toJson call to prevent further browser issues -C1368119
	//
	//  	try {
	//	   	dojo.require("dojox.json.ref")
	//		props.methodArguments = dojox.json.ref.toJson( args );
	//	} catch(e) {
	//		props.methodArguments = {};
	//	} 

        return props;
    }, 

    buildTargetProperties:function(props, target){
        if(!target) { return; }

        var isNode = target.nodeType && target.cloneNode;
        if (isNode) {
            return this.buildNodeProperties(props, target);
        } else {
            dojo.raise("buildTargetProperties() Unknown target type:" + target);
        }
    },

    buildNodeProperties:function(props, node) {
        if (node.getAttribute("id")) {
            props["beventtarget.id"]=node.getAttribute("id");
        }
    },

    stopEvent: dojo.stopEvent
};

tapestry.widget = {
    synchronizeWidgetState: function(){tapestry.log('t.w.synchronizeWidgetState', arguments);},
  AlertDialog:function(){tapestry.log('t.w.AlertDialog', arguments);}
};

/**
 * package: tapestry.html
 * Provides functionality related to parsing and rendering dom nodes.
 */
tapestry.html={

    CompactElementRegexp:/<([a-zA-Z](?!nput)[a-zA-Z]*)([^>]*?)\/>/g, // regexp for compact html elements
    CompactElementReplacer:'<$1$2></$1>', // replace pattern for compact html elements

    /**
     * Function: getContentAsString
     *
     * Takes a dom node and returns its contents rendered in a string.
     *
     * The resulting string does NOT contain any markup (or attributes) of
     * the given node - only child nodes are rendered and returned.Content
     *
     * Implementation Note: This function tries to make use of browser
     * specific features (the xml attribute of nodes in IE and the XMLSerializer
     * object in Mozilla derivatives) - if those fails, a generic implementation
     * is used that is guaranteed to work in all platforms.
   *
   * Parameters:
   *
   *  node - The dom node.
   * Returns:
   *
   * The string representation of the given node's contents.
   */
  getContentAsString:function(node){
    if (typeof node.xml != "undefined") {
      return this._getContentAsStringIE(node);
    } else if (typeof XMLSerializer != "undefined" ) {
      return this._getContentAsStringMozilla(node);
    } else {
      return this._getContentAsStringGeneric(node);
    }
  },

        /**
         * Function: getElementAsString
         *
         * Takes a dom node and returns itself and its contents rendered in a string.
         *
         * Implementation Note: This function uses a generic implementation in order
         * to generate the returned string.
         *
         * Parameters:
         *
         *  node - The dom node.
         * Returns:
         *
         * The string representation of the given node.
         */
  getElementAsString:function(node){
    if (!node) { return ""; }

    var s='<' + node.nodeName;
    // add attributes
    if (node.attributes && node.attributes.length > 0) {
      for (var i=0; i < node.attributes.length; i++) {
        s += " " + node.attributes[i].name + "=\"" + node.attributes[i].value + "\"";
      }
    }
    // close start tag
    s += '>';
    // content of tag
    s += this._getContentAsStringGeneric(node);
    // end tag
    s += '</' + node.nodeName + '>';
    return s;
  },
        
    /**
     * Adds togglers and js effects to the exception page.
     */
    enhanceExceptionPage:function(){
        // attach toggles + hide content
        
        var elms=dojo.query('.toggle');
        
        if(elms && elms.length > 0){
            for(var i=0;i<elms.length;i++){

                dojo.connect(elms[i], "onclick", function(e) {
                    var thisLink = e.target;
                    //dojo.html.toggleShowing(dojo.byId(thisLink.id + 'Data'));
                    dojo.toggleClass(thisLink, "toggleSelected");

                    if (e.preventDefault)
                        tapestry.event.stopEvent(e);
                    return false;
                });
                //dojo.html.toggleShowing(elms[i].id+'Data');
            }
        }

        // but show last exception's content
        elms=dojo.query('.exception-link');
        if(elms && elms.length > 0){
            elms[elms.length-1].onclick({target:elms[elms.length-1]});
        }
    },

  _getContentAsStringIE:function(node){
    var s=" "; //blank works around an IE-bug
      for (var i = 0; i < node.childNodes.length; i++){
          s += node.childNodes[i].xml;
      }
      return s;
  },

  _getContentAsStringMozilla:function(node){
        if (!this.xmlSerializer){ this.xmlSerializer = new XMLSerializer();}

      var s = "";
        for (var i = 0; i < node.childNodes.length; i++) {
          s += this.xmlSerializer.serializeToString(node.childNodes[i]);
          if (s == "undefined")
            return this._getContentAsStringGeneric(node);
        }

        return this._processCompactElements(s);
  },

  _getContentAsStringGeneric:function(node){
    var s="";
    if (node == null) { return s; }
    for (var i = 0; i < node.childNodes.length; i++) {
      switch (node.childNodes[i].nodeType) {
        case 1: // ELEMENT_NODE
        case 5: // ENTITY_REFERENCE_NODE
          s += this.getElementAsString(node.childNodes[i]);
          break;
        case 3: // TEXT_NODE
        case 2: // ATTRIBUTE_NODE
        case 4: // CDATA_SECTION_NODE
          s += node.childNodes[i].nodeValue;
          break;
        default:
          break;
      }
    }
    return s;
  },

  _processCompactElements:function(htmlData)
  {
     return htmlData.replace(this.CompactElementRegexp, this.CompactElementReplacer);
  }
}

dojo.provide("tapestry.core");
dojo.provide("tapestry.html");
dojo.provide("tapestry.event");
dojo.provide("tapestry.lang");
dojo.provide("tapestry.form");
dojo.provide("tapestry.widget");
dojo.provide("tapestry.form.datetime");
dojo.require("dojox.fx.scroll");

dojo.addOnLoad(
  function(){
    if(typeof addTableWidthStyle != "undefined"){
      addTableWidthStyle();  //in encoreutilities, needed to hook here for dojo addOnLoad
      window.onresize = addTableWidthStyle;
    }
  }
);
